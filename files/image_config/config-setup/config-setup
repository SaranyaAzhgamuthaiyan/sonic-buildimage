#!/bin/bash
###########################################################################
# Copyright 2019 Broadcom. The term "Broadcom" refers to Broadcom Inc.    #
# and/or its subsidiaries.                                                #
#                                                                         #
# Licensed under the Apache License, Version 2.0 (the "License");         #
# you may not use this file except in compliance with the License.        #
# You may obtain a copy of the License at                                 #
#                                                                         #
#   http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                         #
# Unless required by applicable law or agreed to in writing, software     #
# distributed under the License is distributed on an "AS IS" BASIS,       #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
# See the License for the specific language governing permissions and     #
# limitations under the License.                                          #
#                                                                         #
###########################################################################
# SONiC Configuration Setup                                               #
#                                                                         #
# This script is used to initialize configuration used                    #
# by SONiC SWSS. It also performs configuration                           #
# migration.                                                              #
#                                                                         #
###########################################################################

# Initialize constants
INIT_CFG_JSON=/etc/sonic/init_cfg.json
CONFIG_DB_JSON=/etc/sonic/config_db.json
CONFIG_DB_PATH=/etc/sonic/
CONFIG_DB_FACTORY_PATH=/etc/sonic/factory/
CONFIG_DB_PREFIX=config_db
CONFIG_DB_SUFFIX=.json
CONFIG_PRE_MIGRATION_HOOKS=/etc/config-setup/config-migration-pre-hooks.d
CONFIG_POST_MIGRATION_HOOKS=/etc/config-setup/config-migration-post-hooks.d
CONFIG_SETUP_VAR_DIR=/var/lib/config-setup
CONFIG_SETUP_PRE_MIGRATION_FLAG=${CONFIG_SETUP_VAR_DIR}/pending_pre_migration
CONFIG_SETUP_POST_MIGRATION_FLAG=${CONFIG_SETUP_VAR_DIR}/pending_post_migration

# Command usage and help
usage()
{
    cat << EOF
 Usage:  config-setup < backup | boot | factory >

         backup  - Take a backup copy of SONiC configuration.
         boot    - Initialize/migrate SONiC configuration during system boot.
         factory - Create factory default SONiC configuration and save it to
                   to ${CONFIG_DB_JSON}.
EOF
}

# run given script
run_hook() {
    local script="$1"
    local exit_status=0

    if [ -f $script ]; then
        # Check hook for syntactical correctness before executing it
        echo "exec $script ..."
        /bin/bash -n $script
        exit_status=$?
        if [ "$exit_status" -eq 0 ]; then
            . $script
        fi  
        exit_status=$?
    fi  

    if [ -n "$exit_status" ] && [ "$exit_status" -ne 0 ]; then
        echo "$script returned non-zero exit status $exit_status"
    fi  

    return $exit_status
}

# run scripts in given directory
run_hookdir() {
    local dir="$1"
    local progress_file="$2"
    local exit_status=0

    if [ -d "$dir" ]; then
        if [ -n $progress_file ]; then
            [ ! -d  $(dirname $progress_file) ] && mkdir -p $(dirname $progress_file)
            [ ! -e $progress_file  ] &&  run-parts --list $dir > $progress_file
            SCRIPT_LIST=$(cat $progress_file)
        else
            SCRIPT_LIST=$(run-parts --list $dir)
        fi

        for script in $SCRIPT_LIST; do
            run_hook $script
            exit_status=$((exit_status|$?))
            script_name=$(basename $script)
            sed -i "/$script_name/d" $progress_file
        done
        [ -n $progress_file ] && [ "$(cat ${progress_file})" = "" ] && rm -f ${progress_file}
    fi

    return $exit_status
}

# Reload exisitng config db file on disk
# Usage: reload_configdb <config_file>
reload_configdb()
{
    CONFIG_FILE=${1}

    echo "Reloading existing config db..."
    config reload ${CONFIG_FILE} -y -n
}
# Restore SONiC configuration from a backup copy
function copy_config_files_and_directories()
{
    for file_dir in $@; do
        if [ -f /etc/sonic/old_config/${file_dir} ] || [ -d /etc/sonic/old_config/${file_dir} ]; then
            echo "Copying SONiC configuration ${file_dir} ..."
            cp -ar /etc/sonic/old_config/${file_dir} /etc/sonic/
        else
            echo "Missing SONiC configuration ${file_dir} ..."
        fi
    done
}

generate_host_config()
{
    PLATFORM=${PLATFORM:-`sonic-cfggen -H -v DEVICE_METADATA.localhost.platform`}
    PRESET=(`head -n 1 /usr/share/sonic/device/$PLATFORM/default_sku`)
    HW_KEY=${PRESET[0]}
    DEFAULT_PRESET=${PRESET[1]}
    CHASSIS_TEMP_THRESHOLD_JSON_FILE=/usr/share/sonic/device/$PLATFORM/chassis_temperature_threshold.json

    DEST_FILE=$1
    rv=1

    TZ="Asia/Shanghai"
    if [ -f ${CHASSIS_TEMP_THRESHOLD_JSON_FILE} ]; then
        sonic-cfggen -H -k ${HW_KEY} -z ${TZ} --preset ${DEFAULT_PRESET} -j ${CHASSIS_TEMP_THRESHOLD_JSON_FILE} > ${DEST_FILE} 
    else
        sonic-cfggen -H -k ${HW_KEY} -z ${TZ} --preset ${DEFAULT_PRESET} > ${DEST_FILE} 
    fi
    rv=$?
    if [ $rv -ne 0 ]; then
        return $rv
    fi

    return 0
}

restore_factory_config()
{
    generate_host_config ${CONFIG_DB_JSON}
    if [[ ($NUM_ASIC -gt 1) ]]; then
        asic_num=0
        while [[ ($asic_num -lt $NUM_ASIC) && ($NUM_ASIC -gt 1) ]]; do
            CONFIGx_DB_JSON="${CONFIG_DB_FACTORY_PATH}/p230c/L1_400G_CA_100GE/${CONFIG_DB_PREFIX}${asic_num}${CONFIG_DB_SUFFIX}"
            if [ -f ${CONFIGx_DB_JSON} ]; then
                cp ${CONFIGx_DB_JSON} ${CONFIG_DB_PATH}
            fi
            ((asic_num = asic_num + 1))
        done
    fi
    rm -rf ${CONFIG_DB_PATH}/frr

    users=`cat /etc/passwd | grep clish_start | grep -v admin | cut -d\: -f1`
    for user in ${users}; do
        sudo userdel -r ${user} > /dev/null 2>&1
    done

    if [[ -f ${CONFIG_DB_PATH}/config_alarm_profile.json ]]; then
        rm -f ${CONFIG_DB_PATH}/config_alarm_profile.json
    fi

    [ -f /etc/sonic/redis/dump.rdb ] &&  rm -f /etc/sonic/redis/dump.rdb
    if [[ ($NUM_ASIC -gt 1) ]]; then
        asic_num=0
        while [[ ($asic_num -lt $NUM_ASIC) && ($NUM_ASIC -gt 1) ]]; do
            [ -f /etc/sonic/redis${asic_num}/dump.rdb ] &&  rm -f /etc/sonic/redis${asic_num}/dump.rdb
            ((asic_num = asic_num + 1))
        done
    fi
}

# Restore config-setup post migration hooks from a backup copy
copy_post_migration_hooks()
{
    BACKUP_DIR=/etc/sonic/old_config/config-migration-post-hooks.d
    if [ -d ${BACKUP_DIR} ]; then
        [ -d ${CONFIG_POST_MIGRATION_HOOKS} ] || mkdir -p ${CONFIG_POST_MIGRATION_HOOKS}
        for hook in $(ls -1 ${BACKUP_DIR}) ; do
            if [ ! -e ${CONFIG_POST_MIGRATION_HOOKS}/$hook ]; then
                cp -ar ${BACKUP_DIR}/$hook ${CONFIG_POST_MIGRATION_HOOKS}
            fi
        done
    fi
}

# Get the list of config db for both
# single and multi-npu platforms
get_config_db_file_list()
{
    config_db_file_list=${CONFIG_DB_PREFIX}${CONFIG_DB_SUFFIX}
    asic_num=0
    while [[ ($asic_num -lt $NUM_ASIC) && ($NUM_ASIC -gt 1) ]]; do
        config_db_file_list+=' '${CONFIG_DB_PREFIX}$asic_num${CONFIG_DB_SUFFIX}
        ((asic_num = asic_num + 1))
    done

    echo $config_db_file_list
}
# Check if all needed config db are prsesnt for both
# single and multi-npu platforms
check_all_config_db_present()
{
    if [[ ! -r ${CONFIG_DB_JSON} ]]; then
       return 1
    fi
    asic_num=0
    while [[ ($asic_num -lt $NUM_ASIC) && ($NUM_ASIC -gt 1) ]]; do
        if [[ ! -r ${CONFIG_DB_PATH}${CONFIG_DB_PREFIX}$asic_num${CONFIG_DB_SUFFIX} ]]; then
            return 1
        fi
        ((asic_num = asic_num + 1))
    done

    return 0   
}

# Perform configuration migration from backup copy.
#  - This step is performed when a new image is installed and SONiC switch boots into it
do_config_migration_pre()
{
    # Identify list of files to migrate
    copy_list="snmp.yml frr config_alarm_profile.json"

    # Migrate all configuration files from old to new
    copy_config_files_and_directories $copy_list
    
    # Migrate all config_db from old to new
    copy_config_files_and_directories $(get_config_db_file_list)

    if check_all_config_db_present; then
        echo "Use config_db.json from old system..."
        reload_configdb
    else
        echo "Didn't found config_db.json ..."
    fi
}

do_config_migration_post()
{
    # Migrate post-migration hooks
    copy_post_migration_hooks

    # Execute custom hooks if present
    run_hookdir ${CONFIG_POST_MIGRATION_HOOKS} ${CONFIG_SETUP_POST_MIGRATION_FLAG}

    if check_all_config_db_present; then
        echo "Use config_db.json from old system..."
        reload_configdb
    else
        echo "Didn't found config_db.json ..."
    fi

    rm -f /tmp/pending_config_migration
}

# Take a backup of current SONiC configuration
do_config_backup()
{
    echo "Taking backup of curent configuration"
    rm -rf /host/old_config
    cp -ar /etc/sonic /host/old_config
    [ -d ${CONFIG_POST_MIGRATION_HOOKS} ] && cp -arL ${CONFIG_POST_MIGRATION_HOOKS} /host/old_config

    # Execute custom hooks if present
    run_hookdir ${CONFIG_PRE_MIGRATION_HOOKS} ${CONFIG_SETUP_PRE_MIGRATION_FLAG}
}

# Process switch bootup event
#  - Perform configuration migration if requested
#  - Perform configuration initialization if requested
#  - If no saved SONiC configuration is found and ZTP is enabled,
#    start ZTP
boot_config()
{
    if [ -e /tmp/pending_config_migration ]; then
        do_config_migration_pre
    fi

    if [[ ($NUM_ASIC -gt 1) ]]; then
        need_reload_config=0
        if [ ! -e ${CONFIG_DB_JSON} ]; then
            generate_host_config ${CONFIG_DB_JSON}
            need_reload_config=1
        fi

        PLATFORM=${PLATFORM:-`sonic-cfggen -H -v DEVICE_METADATA.localhost.platform`}
        CURRENT_LINECARD_CONFIGURATION_J2=/etc/sonic/current_linecard_configuration.j2
        LINECARD_CONFIG_J2=/usr/share/sonic/device/$PLATFORM/current_linecard_configuration.j2
        if [ ! -e ${CURRENT_LINECARD_CONFIGURATION_J2} ] && [ -e ${LINECARD_CONFIG_J2} ]; then
            cp -rf ${LINECARD_CONFIG_J2} ${CURRENT_LINECARD_CONFIGURATION_J2}
        fi

        if [ "x"$need_reload_config == "x1" ]; then
            config reload -y -n
        fi
    fi

    if [ -e /tmp/pending_config_migration ]; then
        do_config_migration_post
    fi

}

# read SONiC immutable variables
[ -f /etc/sonic/sonic-environment ] && . /etc/sonic/sonic-environment

### Execution starts here ###
PLATFORM=${PLATFORM:-`sonic-cfggen -H -v DEVICE_METADATA.localhost.platform`}
# Parse the device specific asic conf file, if it exists
ASIC_CONF=/usr/share/sonic/device/$PLATFORM/asic.conf
if [[ -f "$ASIC_CONF" ]]; then
    source $ASIC_CONF
fi


CMD=$1
# Default command is boot
if [ "$CMD" = "" ] || [ "$CMD" = "help" ] || \
   [ "$CMD" = "-h" ] || [ "$CMD" = "--help" ]; then
    usage
    exit 1
fi

# Process switch bootup event
if [ "$CMD" = "boot" ]; then
    boot_config
fi

# Process factory default configuration creation request
if [ "$CMD" = "factory" ]; then
    restore_factory_config
fi

# Take a backup of current configuration
if [ "$CMD" = "backup" ]; then
    do_config_backup
fi

exit 0
